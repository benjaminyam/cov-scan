# VARIABLES TO OVERRIDE
# COV_USER=admin
# COVERITY_PASSPHRASE=password_or_token
# COV_URL=https://coverity.company.com

COV_IDIR=${COV_IDIR-idir}
COV_BUILD_BUILD_CMD=${COV_BUILD_BUILD_CMD-""}
COV_CAPTURE_FLAGS=${COV_CAPTURE_FLAGS-""}
COV_ANALYZE_FLAGS=${COV_ANALYZE_FLAGS-""}

COV_ANALYZE_QUALITY=${COV_ANALYZE_QUALITY-1}
COV_ANALYZE_SECURITY=${COV_ANALYZE_SECURITY-1}
COV_ANALYZE_DISTRUST_ALL=${COV_ANALYZE_DISTRUST_ALL-0}
COV_ANALYZE_AUDIT_CHECKERS=${COV_ANALYZE_AUDIT_CHECKERS-0}

COV_PROJECT=${COV_PROJECT-$(basename `git rev-parse --show-toplevel`)}
COV_STREAM=${COV_STREAM-$COV_PROJECT-$(git rev-parse --abbrev-ref HEAD)}

cov_build_cmd="cov-build --dir $COV_IDIR"
cov_android=0

#cpu_cmd="cat /proc/cpuinfo | grep processor | wc -l"
cpu_cmd="nproc"

if [[ "$OSTYPE" == "darwin"* ]]; then
    cpu_cmd="sysctl -n machdep.cpu.thread_count"
fi

# Build Command
if [ -z "$COV_BUILD_BUILD_CMD" ]; then
	if [ -f "pom.xml" ]; then
		mvn -version &>/dev/null && {
			COV_BUILD_BUILD_CMD="mvn -T $($cpu_cmd) clean compile -DskipTests -Dmaven.test.skip=true"
			# COV_BUILD_BUILD_CMD="mvn clean compile -DskipTests -Dmaven.test.skip=true"

			echo COV_SCAN: [BUILD START] $cov_build_cmd $COV_BUILD_BUILD_CMD
			time $cov_build_cmd $COV_BUILD_BUILD_CMD &&
			echo COV_SCAN: [BUILD END] $cov_build_cmd $COV_BUILD_BUILD_CMD || 
			{
				echo COV_SCAN: [ERROR] MAVEN PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
				exit 1
			}
		} || {
			echo COV_SCAN: [WARNING] MAVEN NOT INSTALLED, FALLING BACK TO SOURCE CAPTURE
			COV_CAPTURE_FLAGS="--source-dir ."
		}
	fi
	if [ -f "main.go" ] || [ -f "go.mod" ]; then
		go version &>/dev/null && {
			echo COV_SCAN: [CLEAN] go clean
			go clean
			COV_BUILD_BUILD_CMD="go build"

			echo COV_SCAN: [BUILD START] $cov_build_cmd $COV_BUILD_BUILD_CMD
			time $cov_build_cmd $COV_BUILD_BUILD_CMD || 
			{
				echo COV_SCAN: [ERROR] GO PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
				exit 1
			}
		} || {
			echo COV_SCAN: [ERROR] GO PROJECT DETECTED BUT GO NOT INSTALLED, STOPPING CAPTURE
			exit 1
		}

	fi
	if [ -f *".sln" ]; then
		dotnet --info &>/dev/null && { 
			echo COV_SCAN: [CLEAN] dotnet clean
			dotnet clean
			COV_BUILD_BUILD_CMD="dotnet build"

			echo COV_SCAN: [BUILD START] $cov_build_cmd $COV_BUILD_BUILD_CMD
			time $cov_build_cmd $COV_BUILD_BUILD_CMD &&
			echo COV_SCAN: [BUILD END] $cov_build_cmd $COV_BUILD_BUILD_CMD || {
				echo COV_SCAN: [ERROR] DOTNET PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
				exit 1
			}
		} || {
			echo COV_SCAN: [ERROR] DOTNET PROJECT DETECTED BUT DOTNOT NOT INSTALLED, STOPPING CAPTURE
			exit 1
		}
	fi
	if [ -f "Makefile" ] || [ -f "makefile" ]	; then
		make clean && {
			COV_BUILD_BUILD_CMD="make"

			echo COV_SCAN: [BUILD START] $cov_build_cmd $COV_BUILD_BUILD_CMD
			time $cov_build_cmd $COV_BUILD_BUILD_CMD &&
			echo COV_SCAN: [BUILD END] $cov_build_cmd $COV_BUILD_BUILD_CMD || 
			{
				echo COV_SCAN: [ERROR] MAKE PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
				exit 1
			}
		} || {
			echo COV_SCAN: [ERROR] MAKEFILE DETECTED BUT MAKE COULD NOT CLEAN, STOPPING CAPTURE
			exit 1
		}
	fi
	if [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
		{
			{
				./gradlew -version && 
				COV_BUILD_BUILD_CMD="./gradlew clean assembleRelease" 
			} || {
				./gradle -version &&
				COV_BUILD_BUILD_CMD="./gradle clean assembleRelease"
			}
		} && {
			cov_android=1

			echo COV_SCAN: [BUILD START] $cov_build_cmd $COV_BUILD_BUILD_CMD
			time $cov_build_cmd $COV_BUILD_BUILD_CMD &&
			echo COV_SCAN: [BUILD END] $cov_build_cmd $COV_BUILD_BUILD_CMD || 
			{
				echo COV_SCAN: [ERROR] GRADLE PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
				exit 1
			}
		} || {
			echo COV_SCAN: [ERROR] GRADLE PROJECT DETECTED BUT GRADLE NOT INSTALLED, STOPPING CAPTURE
			exit 1
		}
	fi
else
	echo COV_SCAN: [BUILD START] $cov_build_cmd $COV_BUILD_BUILD_CMD
	time $cov_build_cmd $COV_BUILD_BUILD_CMD &&
	echo COV_SCAN: [BUILD END] $cov_build_cmd $COV_BUILD_BUILD_CMD || 
	{
		echo COV_SCAN: [ERROR] PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
		exit 1
	}
fi

# Capture Command
if [ -z "$COV_CAPTURE_FLAGS" ]; then
	if [ -f "package.json" ]; then
		COV_CAPTURE_FLAGS="--project-dir ."
	elif [ $(find . -type f \( -name "*.html" -or -name "*.htm" -or -name "*.js" -or -name "*.rb" -or -name "*.py" -or -name "*.ts" -or -name "*.php" \) | wc -l) -gt 0 ]; then
		COV_CAPTURE_FLAGS="--source-dir ."
	else
		COV_CAPTURE_FLAGS="--config-dir ."
	fi
fi

echo COV_SCAN: [CAPTURE START] cov-capture --dir $COV_IDIR $COV_CAPTURE_FLAGS
time cov-capture --dir $COV_IDIR $COV_CAPTURE_FLAGS
echo COV_SCAN: [CAPTURE END] cov-capture --dir $COV_IDIR $COV_CAPTURE_FLAGS

# Analysis Command
if [ -z "$COV_ANALYZE_FLAGS" ]; then
	COV_ANALYZE_FLAGS+=" --xx-use-buda-for-cs-and-java-security"
	
	if [ $COV_ANALYZE_AUDIT_CHECKERS -eq 1 ]; then
			COV_ANALYZE_FLAGS+=" --enable-audit-checkers"
	fi

	if [ $COV_ANALYZE_QUALITY -eq 1 ]; then
		COV_ANALYZE_FLAGS+=" --all"
	fi

	if [ $COV_ANALYZE_SECURITY -eq 1 ]; then
		COV_ANALYZE_FLAGS+=" --security --webapp-security"

		if [ $cov_android -eq 1 ]; then
			COV_ANALYZE_FLAGS+=" --android-security"
		fi
		
		if [ $COV_ANALYZE_QUALITY -eq 0 ]; then
			COV_ANALYZE_FLAGS+=" --disable-default"
		fi
	fi

	if [ $COV_ANALYZE_DISTRUST_ALL -eq 1 ]; then
		COV_ANALYZE_FLAGS+=" --distrust-all"
	fi
fi

coverity -v | grep '2021.03' &>/dev/null
if [ $? == 0 ]; then
   COV_ANALYZE_FLAGS+="  --disable UNINIT --disable UNINIT_CTOR"
fi

echo COV_SCAN: [ANALYZE START] cov-analyze --dir $COV_IDIR --strip-path $(pwd) $COV_ANALYZE_FLAGS
time cov-analyze --dir $COV_IDIR --strip-path $(pwd) $COV_ANALYZE_FLAGS
echo COV_SCAN: [ANALYZE END] cov-analyze --dir $COV_IDIR --strip-path $(pwd) $COV_ANALYZE_FLAGS

# Commit Defects
`pwd`/cov-commit