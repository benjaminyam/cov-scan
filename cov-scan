quality=${quality-1}
security=${security-1}
distrust_all=${distrust_all-0}
audit_checkers=${audit_checkers-0}

cov_build_cmd="cov-build --dir idir"
build_cmd=${build_cmd-""}
capture_cmd=${capture_cmd-""}
analysis_flags=${analysis_flags-""}
COV_PROJECT=${COV_PROJECT-$(basename `git rev-parse --show-toplevel`)}
COV_STREAM=${COV_STREAM-$COV_PROJECT-$(git rev-parse --abbrev-ref HEAD)}

#cpu_cmd="cat /proc/cpuinfo | grep processor | wc -l"
cpu_cmd="nproc"

if [[ "$OSTYPE" == "darwin"* ]]; then
        cpu_cmd="sysctl -n machdep.cpu.thread_count"
fi


# Build Command
if [ -z $build_cmd ]; then
	if [ $(ls | grep pom.xml | wc -l) -gt 0 ]; then
		mvn -version &>/dev/null && {
			build_cmd="mvn -T $($cpu_cmd) clean compile -DskipTests -Dmaven.test.skip=true"
			echo COV_SCAN: [BUILD] $cov_build_cmd $build_cmd

			$cov_build_cmd $build_cmd || 
			{
				echo COV_SCAN: [ERROR] MAVEN PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
				exit 1
			}
		} || {
			echo COV_SCAN: [WARNING] MAVEN NOT INSTALLED, FALLING BACK TO SOURCE CAPTURE
			capture_cmd="--source-dir ."
		}
	fi
	if [ $(ls | grep go.mod | wc -l) -gt 0 ]; then
		go version &>/dev/null && {
			echo COV_SCAN: [CLEAN] go clean
			go clean
			build_cmd="go build"
			echo COV_SCAN: [BUILD] $cov_build_cmd $build_cmd
			$cov_build_cmd $build_cmd || 
			{
				echo COV_SCAN: [ERROR] GRADLE PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
				exit 1
			}
		} || {
			echo COV_SCAN: [ERROR] GRADLE PROJECT DETECTED BUT GRADLE NOT INSTALLED, STOPPING CAPTURE
			exit 1
		}

	fi
	if [ $(ls | grep .sln | wc -l) -gt 0 ]; then
		dotnet --info &>/dev/null && { 
			echo COV_SCAN: [CLEAN] dotnet clean
			dotnet clean
			build_cmd="dotnet build"
			echo COV_SCAN: [BUILD] $cov_build_cmd $build_cmd

			$cov_build_cmd $build_cmd || {
				echo COV_SCAN: [ERROR] DOTNET PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
				exit 1
			}
		} || {
			echo COV_SCAN: [ERROR] DOTNET PROJECT DETECTED BUT DOTNOT NOT INSTALLED, STOPPING CAPTURE
			exit 1
		}
	fi
	if [ $(ls | grep gradle.properties | wc -l) -gt 0 ]; then
		./gradlew -version && {
			build_cmd="./gradlew clean build"
			./gradlew stop
			echo COV_SCAN: [BUILD] $cov_build_cmd $build_cmd

			$cov_build_cmd $build_cmd || 
			{
				echo COV_SCAN: [ERROR] GRADLE PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
				exit 1
			}
		} || {
			echo COV_SCAN: [ERROR] GRADLE PROJECT DETECTED BUT GRADLE NOT INSTALLED, STOPPING CAPTURE
			exit 1
		}
	fi
else
	$cov_build_cmd $build_cmd || 
	{
		echo COV_SCAN: [ERROR] PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
		exit 1
	}
fi

# Capture Command
if [ -z "$capture_cmd" ]; then
	if [ $(ls package.json | wc -l) -gt 0 ]; then
		capture_cmd="--project-dir ."
	elif [ $(find . -type f \( -name "*.html" -or -name "*.htm" -or -name "*.js" -or -name "*.rb" -or -name "*.py" -or -name "*.ts" -or -name "*.php" \) | wc -l) -gt 0 ]; then
		capture_cmd="--source-dir ."
	fi
fi

if [ -n "$capture_cmd" ]; then	
        echo COV_SCAN: [CAPTURE] cov-capture --dir idir $capture_cmd
	cov-capture --dir idir $capture_cmd
fi

# Analysis Command
if [ $audit_checkers -eq 1 ]; then
        analysis_flags+=" --enable-audit-checkers"
fi

if [ $quality -eq 1 ]; then
	analysis_flags+=" --all"
fi

if [ $security -eq 1 ]; then
	analysis_flags+=" --webapp-security" 	
	if [ $quality -eq 0 ]; then
		analysis_flags+=" --disable-default"
	fi
fi

if [ $distrust_all -eq 1 ]; then
	analysis_flags+=" --distrust-all"
fi

echo COV_SCAN: [ANALYZE] cov-analyze --dir idir --strip-path $(pwd) $analysis_flags
cov-analyze --dir idir --strip-path $(pwd) $analysis_flags

cov-commit-defects --dir idir --url $COV_URL --stream $(git
