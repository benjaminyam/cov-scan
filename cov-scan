COV_ANALYZE_QUALITY=${COV_ANALYZE_QUALITY-1}
COV_ANALYZE_SECURITY=${COV_ANALYZE_SECURITY-1}
COV_ANALYZE_DISTRUST_ALL=${COV_ANALYZE_DISTRUST_ALL-0}
COV_ANALYZE_AUDIT_CHECKERS=${COV_ANALYZE_AUDIT_CHECKERS-0}
COV_BUILD_BUILD_CMD=${COV_BUILD_BUILD_CMD-""}
COV_CAPTURE_FLAGS=${COV_CAPTURE_FLAGS-""}
COV_ANALYZE_FLAGS=${COV_ANALYZE_FLAGS-""}
COV_PROJECT=${COV_PROJECT-$(basename `git rev-parse --show-toplevel`)}
COV_STREAM=${COV_STREAM-$COV_PROJECT-$(git rev-parse --abbrev-ref HEAD)}

cov_build_cmd="cov-build --dir idir"

#cpu_cmd="cat /proc/cpuinfo | grep processor | wc -l"
cpu_cmd="nproc"

if [[ "$OSTYPE" == "darwin"* ]]; then
    cpu_cmd="sysctl -n machdep.cpu.thread_count"
fi


# Build Command
if [ -z $COV_BUILD_BUILD_CMD ]; then
	if [ $(ls | grep pom.xml | wc -l) -gt 0 ]; then
		mvn -version &>/dev/null && {
			COV_BUILD_BUILD_CMD="mvn -T $($cpu_cmd) clean compile -DskipTests -Dmaven.test.skip=true"
			echo COV_SCAN: [BUILD] $cov_build_cmd $COV_BUILD_BUILD_CMD

			$cov_build_cmd $COV_BUILD_BUILD_CMD || 
			{
				echo COV_SCAN: [ERROR] MAVEN PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
				exit 1
			}
		} || {
			echo COV_SCAN: [WARNING] MAVEN NOT INSTALLED, FALLING BACK TO SOURCE CAPTURE
			COV_CAPTURE_FLAGS="--source-dir ."
		}
	fi
	if [ $(ls | grep go.mod | wc -l) -gt 0 ]; then
		go version &>/dev/null && {
			echo COV_SCAN: [CLEAN] go clean
			go clean
			COV_BUILD_BUILD_CMD="go build"
			echo COV_SCAN: [BUILD] $cov_build_cmd $COV_BUILD_BUILD_CMD
			$cov_build_cmd $COV_BUILD_BUILD_CMD || 
			{
				echo COV_SCAN: [ERROR] GRADLE PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
				exit 1
			}
		} || {
			echo COV_SCAN: [ERROR] GRADLE PROJECT DETECTED BUT GRADLE NOT INSTALLED, STOPPING CAPTURE
			exit 1
		}

	fi
	if [ $(ls | grep .sln | wc -l) -gt 0 ]; then
		dotnet --info &>/dev/null && { 
			echo COV_SCAN: [CLEAN] dotnet clean
			dotnet clean
			COV_BUILD_BUILD_CMD="dotnet build"
			echo COV_SCAN: [BUILD] $cov_build_cmd $COV_BUILD_BUILD_CMD

			$cov_build_cmd $COV_BUILD_BUILD_CMD || {
				echo COV_SCAN: [ERROR] DOTNET PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
				exit 1
			}
		} || {
			echo COV_SCAN: [ERROR] DOTNET PROJECT DETECTED BUT DOTNOT NOT INSTALLED, STOPPING CAPTURE
			exit 1
		}
	fi
	if [ $(ls | grep gradle.properties | wc -l) -gt 0 ]; then
		./gradlew -version && {
			COV_BUILD_BUILD_CMD="./gradlew clean build"
			./gradlew stop
			echo COV_SCAN: [BUILD] $cov_build_cmd $COV_BUILD_BUILD_CMD

			$cov_build_cmd $COV_BUILD_BUILD_CMD || 
			{
				echo COV_SCAN: [ERROR] GRADLE PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
				exit 1
			}
		} || {
			echo COV_SCAN: [ERROR] GRADLE PROJECT DETECTED BUT GRADLE NOT INSTALLED, STOPPING CAPTURE
			exit 1
		}
	fi
else
	$cov_build_cmd $COV_BUILD_BUILD_CMD || 
	{
		echo COV_SCAN: [ERROR] PROJECT DID NOT BUILD PROPERLY, CHECK BUILD COMPLETES SUCCESSFULLY
		exit 1
	}
fi

# Capture Command
if [ -z "$COV_CAPTURE_FLAGS" ]; then
	if [ $(ls | grep package.json | wc -l) -gt 0 ]; then
		COV_CAPTURE_FLAGS="--project-dir ."
	elif [ $(find . -type f \( -name "*.html" -or -name "*.htm" -or -name "*.js" -or -name "*.rb" -or -name "*.py" -or -name "*.ts" -or -name "*.php" \) | wc -l) -gt 0 ]; then
		COV_CAPTURE_FLAGS="--source-dir ."
	else
		COV_CAPTURE_FLAGS="--config-dir ."
	fi
fi

echo COV_SCAN: [CAPTURE] cov-capture --dir idir $COV_CAPTURE_FLAGS
cov-capture --dir idir $COV_CAPTURE_FLAGS

# Analysis Command
if [ $COV_ANALYZE_AUDIT_CHECKERS -eq 1 ]; then
        COV_ANALYZE_FLAGS+=" --enable-audit-checkers"
fi

if [ $COV_ANALYZE_QUALITY -eq 1 ]; then
	COV_ANALYZE_FLAGS+=" --all"
fi

if [ $COV_ANALYZE_SECURITY -eq 1 ]; then
	COV_ANALYZE_FLAGS+=" --webapp-security" 	
	if [ $COV_ANALYZE_QUALITY -eq 0 ]; then
		COV_ANALYZE_FLAGS+=" --disable-default"
	fi
fi

if [ $COV_ANALYZE_DISTRUST_ALL -eq 1 ]; then
	COV_ANALYZE_FLAGS+=" --distrust-all"
fi

echo COV_SCAN: [ANALYZE] cov-analyze --dir idir --strip-path $(pwd) $COV_ANALYZE_FLAGS
cov-analyze --dir idir --strip-path $(pwd) $COV_ANALYZE_FLAGS

if [ $(cov-manage-im --url $COV_URL --mode streams --name $COV_STREAM --show -no-headers | wc -l) -eq 0 ]; then
	cov-manage-im --url $COV_URL --on-new-cert trust --mode streams  --add --set name:$COV_STREAM
	cov-manage-im --url $COV_URL --on-new-cert trust --mode projects --add --set name:$COV_PROJECT || true
    cov-manage-im --url $COV_URL --on-new-cert trust --mode projects --name $COV_PROJECT --update --insert stream:$COV_STREAM
fi
cov-commit-defects --dir idir --url $COV_URL --on-new-cert trust --stream $COV_STREAM
